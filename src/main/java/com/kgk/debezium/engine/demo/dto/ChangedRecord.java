/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.kgk.debezium.engine.demo.dto;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ChangedRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4691555992043249877L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ChangedRecord\",\"namespace\":\"com.kgk.debezium.engine.demo.dto\",\"fields\":[{\"name\":\"source\",\"type\":{\"type\":\"record\",\"name\":\"Source\",\"fields\":[{\"name\":\"db\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"schema\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"table\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"lsn\",\"type\":\"long\"}]}},{\"name\":\"operation\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tsMs\",\"type\":\"long\"},{\"name\":\"data\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ChangedRecord> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ChangedRecord> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ChangedRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ChangedRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ChangedRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ChangedRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ChangedRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ChangedRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ChangedRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private com.kgk.debezium.engine.demo.dto.Source source;
  private java.lang.String operation;
  private long tsMs;
  private java.util.Map<java.lang.String,java.lang.String> data;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ChangedRecord() {}

  /**
   * All-args constructor.
   * @param source The new value for source
   * @param operation The new value for operation
   * @param tsMs The new value for tsMs
   * @param data The new value for data
   */
  public ChangedRecord(com.kgk.debezium.engine.demo.dto.Source source, java.lang.String operation, java.lang.Long tsMs, java.util.Map<java.lang.String,java.lang.String> data) {
    this.source = source;
    this.operation = operation;
    this.tsMs = tsMs;
    this.data = data;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return source;
    case 1: return operation;
    case 2: return tsMs;
    case 3: return data;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: source = (com.kgk.debezium.engine.demo.dto.Source)value$; break;
    case 1: operation = value$ != null ? value$.toString() : null; break;
    case 2: tsMs = (java.lang.Long)value$; break;
    case 3: data = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'source' field.
   * @return The value of the 'source' field.
   */
  public com.kgk.debezium.engine.demo.dto.Source getSource() {
    return source;
  }


  /**
   * Sets the value of the 'source' field.
   * @param value the value to set.
   */
  public void setSource(com.kgk.debezium.engine.demo.dto.Source value) {
    this.source = value;
  }

  /**
   * Gets the value of the 'operation' field.
   * @return The value of the 'operation' field.
   */
  public java.lang.String getOperation() {
    return operation;
  }


  /**
   * Sets the value of the 'operation' field.
   * @param value the value to set.
   */
  public void setOperation(java.lang.String value) {
    this.operation = value;
  }

  /**
   * Gets the value of the 'tsMs' field.
   * @return The value of the 'tsMs' field.
   */
  public long getTsMs() {
    return tsMs;
  }


  /**
   * Sets the value of the 'tsMs' field.
   * @param value the value to set.
   */
  public void setTsMs(long value) {
    this.tsMs = value;
  }

  /**
   * Gets the value of the 'data' field.
   * @return The value of the 'data' field.
   */
  public java.util.Map<java.lang.String,java.lang.String> getData() {
    return data;
  }


  /**
   * Sets the value of the 'data' field.
   * @param value the value to set.
   */
  public void setData(java.util.Map<java.lang.String,java.lang.String> value) {
    this.data = value;
  }

  /**
   * Creates a new ChangedRecord RecordBuilder.
   * @return A new ChangedRecord RecordBuilder
   */
  public static com.kgk.debezium.engine.demo.dto.ChangedRecord.Builder newBuilder() {
    return new com.kgk.debezium.engine.demo.dto.ChangedRecord.Builder();
  }

  /**
   * Creates a new ChangedRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ChangedRecord RecordBuilder
   */
  public static com.kgk.debezium.engine.demo.dto.ChangedRecord.Builder newBuilder(com.kgk.debezium.engine.demo.dto.ChangedRecord.Builder other) {
    if (other == null) {
      return new com.kgk.debezium.engine.demo.dto.ChangedRecord.Builder();
    } else {
      return new com.kgk.debezium.engine.demo.dto.ChangedRecord.Builder(other);
    }
  }

  /**
   * Creates a new ChangedRecord RecordBuilder by copying an existing ChangedRecord instance.
   * @param other The existing instance to copy.
   * @return A new ChangedRecord RecordBuilder
   */
  public static com.kgk.debezium.engine.demo.dto.ChangedRecord.Builder newBuilder(com.kgk.debezium.engine.demo.dto.ChangedRecord other) {
    if (other == null) {
      return new com.kgk.debezium.engine.demo.dto.ChangedRecord.Builder();
    } else {
      return new com.kgk.debezium.engine.demo.dto.ChangedRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for ChangedRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ChangedRecord>
    implements org.apache.avro.data.RecordBuilder<ChangedRecord> {

    private com.kgk.debezium.engine.demo.dto.Source source;
    private com.kgk.debezium.engine.demo.dto.Source.Builder sourceBuilder;
    private java.lang.String operation;
    private long tsMs;
    private java.util.Map<java.lang.String,java.lang.String> data;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.kgk.debezium.engine.demo.dto.ChangedRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.source)) {
        this.source = data().deepCopy(fields()[0].schema(), other.source);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasSourceBuilder()) {
        this.sourceBuilder = com.kgk.debezium.engine.demo.dto.Source.newBuilder(other.getSourceBuilder());
      }
      if (isValidValue(fields()[1], other.operation)) {
        this.operation = data().deepCopy(fields()[1].schema(), other.operation);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.tsMs)) {
        this.tsMs = data().deepCopy(fields()[2].schema(), other.tsMs);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.data)) {
        this.data = data().deepCopy(fields()[3].schema(), other.data);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing ChangedRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.kgk.debezium.engine.demo.dto.ChangedRecord other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.source)) {
        this.source = data().deepCopy(fields()[0].schema(), other.source);
        fieldSetFlags()[0] = true;
      }
      this.sourceBuilder = null;
      if (isValidValue(fields()[1], other.operation)) {
        this.operation = data().deepCopy(fields()[1].schema(), other.operation);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tsMs)) {
        this.tsMs = data().deepCopy(fields()[2].schema(), other.tsMs);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.data)) {
        this.data = data().deepCopy(fields()[3].schema(), other.data);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'source' field.
      * @return The value.
      */
    public com.kgk.debezium.engine.demo.dto.Source getSource() {
      return source;
    }


    /**
      * Sets the value of the 'source' field.
      * @param value The value of 'source'.
      * @return This builder.
      */
    public com.kgk.debezium.engine.demo.dto.ChangedRecord.Builder setSource(com.kgk.debezium.engine.demo.dto.Source value) {
      validate(fields()[0], value);
      this.sourceBuilder = null;
      this.source = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'source' field has been set.
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'source' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.kgk.debezium.engine.demo.dto.Source.Builder getSourceBuilder() {
      if (sourceBuilder == null) {
        if (hasSource()) {
          setSourceBuilder(com.kgk.debezium.engine.demo.dto.Source.newBuilder(source));
        } else {
          setSourceBuilder(com.kgk.debezium.engine.demo.dto.Source.newBuilder());
        }
      }
      return sourceBuilder;
    }

    /**
     * Sets the Builder instance for the 'source' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.kgk.debezium.engine.demo.dto.ChangedRecord.Builder setSourceBuilder(com.kgk.debezium.engine.demo.dto.Source.Builder value) {
      clearSource();
      sourceBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'source' field has an active Builder instance
     * @return True if the 'source' field has an active Builder instance
     */
    public boolean hasSourceBuilder() {
      return sourceBuilder != null;
    }

    /**
      * Clears the value of the 'source' field.
      * @return This builder.
      */
    public com.kgk.debezium.engine.demo.dto.ChangedRecord.Builder clearSource() {
      source = null;
      sourceBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'operation' field.
      * @return The value.
      */
    public java.lang.String getOperation() {
      return operation;
    }


    /**
      * Sets the value of the 'operation' field.
      * @param value The value of 'operation'.
      * @return This builder.
      */
    public com.kgk.debezium.engine.demo.dto.ChangedRecord.Builder setOperation(java.lang.String value) {
      validate(fields()[1], value);
      this.operation = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'operation' field has been set.
      * @return True if the 'operation' field has been set, false otherwise.
      */
    public boolean hasOperation() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'operation' field.
      * @return This builder.
      */
    public com.kgk.debezium.engine.demo.dto.ChangedRecord.Builder clearOperation() {
      operation = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'tsMs' field.
      * @return The value.
      */
    public long getTsMs() {
      return tsMs;
    }


    /**
      * Sets the value of the 'tsMs' field.
      * @param value The value of 'tsMs'.
      * @return This builder.
      */
    public com.kgk.debezium.engine.demo.dto.ChangedRecord.Builder setTsMs(long value) {
      validate(fields()[2], value);
      this.tsMs = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'tsMs' field has been set.
      * @return True if the 'tsMs' field has been set, false otherwise.
      */
    public boolean hasTsMs() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'tsMs' field.
      * @return This builder.
      */
    public com.kgk.debezium.engine.demo.dto.ChangedRecord.Builder clearTsMs() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'data' field.
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.lang.String> getData() {
      return data;
    }


    /**
      * Sets the value of the 'data' field.
      * @param value The value of 'data'.
      * @return This builder.
      */
    public com.kgk.debezium.engine.demo.dto.ChangedRecord.Builder setData(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[3], value);
      this.data = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'data' field has been set.
      * @return True if the 'data' field has been set, false otherwise.
      */
    public boolean hasData() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'data' field.
      * @return This builder.
      */
    public com.kgk.debezium.engine.demo.dto.ChangedRecord.Builder clearData() {
      data = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ChangedRecord build() {
      try {
        ChangedRecord record = new ChangedRecord();
        if (sourceBuilder != null) {
          try {
            record.source = this.sourceBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("source"));
            throw e;
          }
        } else {
          record.source = fieldSetFlags()[0] ? this.source : (com.kgk.debezium.engine.demo.dto.Source) defaultValue(fields()[0]);
        }
        record.operation = fieldSetFlags()[1] ? this.operation : (java.lang.String) defaultValue(fields()[1]);
        record.tsMs = fieldSetFlags()[2] ? this.tsMs : (java.lang.Long) defaultValue(fields()[2]);
        record.data = fieldSetFlags()[3] ? this.data : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ChangedRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<ChangedRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ChangedRecord>
    READER$ = (org.apache.avro.io.DatumReader<ChangedRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.source.customEncode(out);

    out.writeString(this.operation);

    out.writeLong(this.tsMs);

    long size0 = this.data.size();
    out.writeMapStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.util.Map.Entry<java.lang.String, java.lang.String> e0: this.data.entrySet()) {
      actualSize0++;
      out.startItem();
      out.writeString(e0.getKey());
      java.lang.String v0 = e0.getValue();
      out.writeString(v0);
    }
    out.writeMapEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.source == null) {
        this.source = new com.kgk.debezium.engine.demo.dto.Source();
      }
      this.source.customDecode(in);

      this.operation = in.readString();

      this.tsMs = in.readLong();

      long size0 = in.readMapStart();
      java.util.Map<java.lang.String,java.lang.String> m0 = this.data; // Need fresh name due to limitation of macro system
      if (m0 == null) {
        m0 = new java.util.HashMap<java.lang.String,java.lang.String>((int)size0);
        this.data = m0;
      } else m0.clear();
      for ( ; 0 < size0; size0 = in.mapNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.String k0 = null;
          k0 = in.readString();
          java.lang.String v0 = null;
          v0 = in.readString();
          m0.put(k0, v0);
        }
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.source == null) {
            this.source = new com.kgk.debezium.engine.demo.dto.Source();
          }
          this.source.customDecode(in);
          break;

        case 1:
          this.operation = in.readString();
          break;

        case 2:
          this.tsMs = in.readLong();
          break;

        case 3:
          long size0 = in.readMapStart();
          java.util.Map<java.lang.String,java.lang.String> m0 = this.data; // Need fresh name due to limitation of macro system
          if (m0 == null) {
            m0 = new java.util.HashMap<java.lang.String,java.lang.String>((int)size0);
            this.data = m0;
          } else m0.clear();
          for ( ; 0 < size0; size0 = in.mapNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.String k0 = null;
              k0 = in.readString();
              java.lang.String v0 = null;
              v0 = in.readString();
              m0.put(k0, v0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










