import com.github.davidmc24.gradle.plugin.avro.GenerateAvroJavaTask

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.2'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.github.davidmc24.gradle.plugin.avro' version '1.9.1'
}

group = 'com.kgk'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven {
		url "https://packages.confluent.io/maven/"
	}
}

dependencies {
	// Spring Boot dependencies
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.kafka:spring-kafka:3.3.2'

	// Debezium dependencies
	implementation 'io.debezium:debezium-embedded:3.0.7.Final'
	implementation 'io.debezium:debezium-connector-postgres:3.0.7.Final'

	// Kafka & Avro dependencies
	implementation 'io.confluent:kafka-avro-serializer:7.8.0'
	implementation 'io.confluent:kafka-schema-registry-client:7.8.0'
	implementation 'org.apache.avro:avro:1.12.0'
	implementation 'io.confluent:kafka-connect-avro-converter:7.8.0' //this is to configure avro converter to debezium engine
	implementation 'io.apicurio:apicurio-registry-utils-converter:2.6.8.Final'

	// Lombok dependencies
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Testing dependencies
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

// Avro Plugin Configuration
avro {
	stringType = "String" // Use Java's String type for Avro strings
	createSetters = true
	fieldVisibility = "PRIVATE"
}

def schemaFiles = files(
		"src/main/resources/avro/GenericChangedRecord.avsc",
		"src/main/resources/avro/StudentChangedRecord.avsc"
)

def excludedFiles = files(
		"src/main/resources/avro/debeziumChangedEventKey.avsc",
		"src/main/resources/avro/debeziumChangedEventValue.avsc"
)

def generateAvro = tasks.register('generateAvro', GenerateAvroJavaTask) {
//	source("src/main/resources/avro") // where Avro schema files are located
	source(schemaFiles) // where Avro schema files are located
	outputDir = file("src/main/java") // where Java classes will be placed
}

tasks.named('test') {
	useJUnitPlatform()
}
